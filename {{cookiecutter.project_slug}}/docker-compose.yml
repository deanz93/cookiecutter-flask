version: '3.9'

services:
  nginx:
    container_name: {{ cookiecutter.project_slug }}_local_nginx
    restart: always
    build: ./compose/nginx/
    ports:
      - "80:80"
    links:
      - app

  app:
    container_name: {{ cookiecutter.project_slug }}_local_flask
    build: .
    volumes:
      - .:/app
    # flask requires SIGINT to stop gracefully
    # (default stop signal from Compose is SIGTERM)
    stop_signal: SIGINT
    env_file:
      - .env
    depends_on:
      - redis
      - postgres

  redis:
    container_name: {{ cookiecutter.project_slug }}_local_redis
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - {{ cookiecutter.project_slug }}_cache:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env

  celery:
    container_name: {{ cookiecutter.project_slug }}_local_celery
    build: .
    command: celery -A app.celery worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis

  postgres:
    container_name: {{ cookiecutter.project_slug }}_local_postgres
    image: postgres:{{ cookiecutter.postgresql_version }}-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=steps_password
      - POSTGRES_USER=steps_user
      - POSTGRES_DB=steps
    volumes:
      - {{ cookiecutter.project_slug }}_dbdata:/var/lib/postgresql/data
      - {{ cookiecutter.project_slug }}_dbbackups:/pg_backups
    healthcheck:
      test: "pg_isready -d postgres -U postgres"

volumes:
  {{ cookiecutter.project_slug }}_cache:
    driver: local
  {{ cookiecutter.project_slug }}_dbdata:
  {{ cookiecutter.project_slug }}_dbbackups:
